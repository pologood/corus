package org.sapia.corus.docker;

import java.io.IOException;
import java.io.InputStream;

import org.sapia.corus.client.common.log.LogCallback;
import org.sapia.corus.client.services.deployer.dist.StarterResult;
import org.sapia.corus.client.services.deployer.dist.docker.DockerStarter;
import org.sapia.corus.client.services.deployer.dist.docker.DockerStarter.DockerStarterAttachment;
import org.sapia.corus.processor.hook.ProcessContext;

/**
 * Abstracts Docker client implementations.
 * 
 * @author yduchesne
 *
 */
public interface DockerClientFacade {
  
  public void pullImage(String imageName, LogCallback callback);

  public void removeImage(String imageName, LogCallback callback);
  
  public void loadImage(String imageName, InputStream imagePayload, LogCallback callback);
  
  public InputStream saveImage(String imageName, LogCallback callback);

  /**
   * @param context the current {@link ProcessContext}, holding data about the process for which a container should be started.
   * @param starterResult the {@link StarterResult}, holding the results of the {@link DockerStarter} invocation.
   * @param attachment the {@link DockerStarterAttachment}, holding Docker-specific state as set by the {@link DockerStarter}.
   * @param callback the {@link LogCallback} to log to.
   * @return the container ID that was generated by docker.
   * @throws IOException if an error occurs attempting to start the container.
   */
  public String startContainer(ProcessContext context, StarterResult starterResult, DockerStarterAttachment attachment, LogCallback callback) throws IOException;
  
  public String startContainer(String containerId, LogCallback callback);
  
  public void stopContainer(String containerId, int timeoutMillis, LogCallback callback);

  public void removeContainer(String containerId, LogCallback callback);
  
  
  
}

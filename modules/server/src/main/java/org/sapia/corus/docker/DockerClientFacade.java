package org.sapia.corus.docker;

import java.io.IOException;
import java.io.InputStream;

import org.sapia.corus.client.common.log.LogCallback;
import org.sapia.corus.client.services.deployer.dist.StarterResult;
import org.sapia.corus.client.services.deployer.dist.docker.DockerStarter;
import org.sapia.corus.client.services.deployer.dist.docker.DockerStarter.DockerStarterAttachment;
import org.sapia.corus.processor.hook.ProcessContext;

/**
 * Abstracts Docker client implementations.
 * 
 * @author yduchesne
 *
 */
public interface DockerClientFacade {

  /**
   * @param imageName the name of the Docker image to pull.
   * @param callback the {@link LogCallback} to log to.
   * @throws IOException if an I/O error occurs while performing this operation.
   * @throws DockerFacadeException if a Docker-specific error occurs.
   */
  public void pullImage(String imageName, LogCallback callback) throws IOException, DockerFacadeException;

  /**
   * @param imageName the name of the Docker image to remove.
   * @param callback the {@link LogCallback} to log to.
   * @throws IOException if an I/O error occurs while performing this operation.
   * @throws DockerFacadeException if a Docker-specific error occurs.
   */
  public void removeImage(String imageName, LogCallback callback) throws IOException, DockerFacadeException;

  /**
   * @param imageName the name of the Docker image to load.
   * @param imagePayload the {@link InputStream} corresponding to the image tarball.
   * @param callback the {@link LogCallback} to log to.
   * @throws IOException if an I/O error occurs while performing this operation.
   * @throws DockerFacadeException if a Docker-specific error occurs.
   */
  public void loadImage(String imageName, InputStream imagePayload, LogCallback callback) throws IOException, DockerFacadeException;
  
  /**
   * @param imageName the name of the Docker image to obtain.
   * @param callback the {@link LogCallback} to log to.
   * @return the {@link InputStream} corresponding to the given docker image's tarball.
   * @throws IOException if an I/O error occurs while performing this operation.
   * @throws DockerFacadeException if a Docker-specific error occurs.
   */
  public InputStream saveImage(String imageName, LogCallback callback) throws IOException, DockerFacadeException;

  /**
   * @param context the current {@link ProcessContext}, holding data about the process for which a container should be started.
   * @param starterResult the {@link StarterResult}, holding the results of the {@link DockerStarter} invocation.
   * @param attachment the {@link DockerStarterAttachment}, holding Docker-specific state as set by the {@link DockerStarter}.
   * @param callback the {@link LogCallback} to log to.
   * @return the container ID that was generated by docker.
   * @throws IOException if an I/O error occurs while performing this operation.
   * @throws DockerFacadeException if a Docker-specific error occurs.
   */
  public String startContainer(ProcessContext context, StarterResult starterResult, DockerStarterAttachment attachment, LogCallback callback) throws IOException, DockerFacadeException;
  
  /**
   * @param imageName the name of the image for which to start a new container.
   * @param callback the {@link LogCallback} to write trace logs to.
   * @return the ID of the container that was started.
   * @throws IOException if an I/O error occurs while performing this operation.
   * @throws DockerFacadeException if a Docker-specific error occurs.
   */
  public String startContainer(String imageName, LogCallback callback) throws IOException, DockerFacadeException;
  
  /**
   * @param containerId the ID of the Docker container to stop.
   * @param timeoutMillis the timeout to observe (in millis) while waiting for container shutdown.
   * @param callback the {@link LogCallback} to log to.
   * @throws IOException if an I/O error occurs while performing this operation.
   * @throws DockerFacadeException if a Docker-specific error occurs.
   */
  public void stopContainer(String containerId, int timeoutMillis, LogCallback callback) throws IOException, DockerFacadeException;

  /**
   * @param containerId the ID of the Docker container to remove.
   * @param timeoutMillis the timeout to observe (in millis) while waiting for container shutdown.
   * @param callback the {@link LogCallback} to log to.
   * @throws IOException if an I/O error occurs while performing this operation.
   * @throws DockerFacadeException if a Docker-specific error occurs.
   */
  public void removeContainer(String containerId, LogCallback callback) throws IOException, DockerFacadeException;
  
  
  
}

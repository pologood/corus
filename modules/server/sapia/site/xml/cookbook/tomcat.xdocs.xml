<sapia:page title="Running Tomcat" cssPath="../css/sapia.css" xmlns:sapia="http://www.sapia-oss.org/2003/XSL/Transform">

  <sapia:vmenu>
    <sapia:vsection name="Corus Home"  href="../index.html"/>
    <sapia:vsection name="Corus Guide" href="../CorusGuide.pdf"/>
 	  <sapia:vsection name="In 2 minutes" href="../overview.html"/>    
    <sapia:vsection name="Interop Spec" href="../CorusInterop.pdf"/>    
  </sapia:vmenu>
  
  <sapia:sect1 title="Running Tomcat">
    <sapia:section>
      <sapia:path name="home" href="../../home.html" />
      <sapia:path name="projects" />
      <sapia:path name="corus" href="../home.html" />
      <sapia:path name="cookbook" href="home.html" />
      <sapia:path name="tomcat" />
    </sapia:section>
  
    <sapia:sect-desc>
      <p>
		  This recipe explains how to run Tomcat with Corus. A sample module which demonstrates how to package a Corus-enabled Tomcat app
		  with Maven is <a href="https://github.com/sapia-oss/corus/tree/develop/samples/corus_sample_tomcat/" target="tomcat_sample_github">available on Github</a>. 
		  The content of this recipe is based on that work.
      </p>
      <p>
      The approach suggested below can be used as a blueprint for packaging any Tomcat-enabled app with Corus. As you'll soon see, we're deploying
      a web application as an exploded .war structure, zipped within the distribution that will be deployed to Corus. That is: the result of the build
      described herein is a distribution .zip file, holding all the resources required to a) start one or more Tomcat instance(s); b) have the web app packaged
      in the distribution picked up by Tomcat at startup.
      </p>
      <p>
      This recipe shows how Corus' port management support allows starting multiple servers on the same host.</p>
    </sapia:sect-desc>
    
    <toc/>
    
	 	<sapia:sect2 title="Environment Setup">
	 	  <sapia:sect-desc>
	 	    <p>
	 	    Our setup involves installing a Tomcat distribution on each host where we'll start Tomcat instances with Corus. We're also setting up the directory where
	 	    Tomcat's logs will be kept.
	 	    </p>
	 	  </sapia:sect-desc>
	 	  <sapia:sect3 title="Tomcat Installation">
		    <p>
			  Separately from the build of the distribution that we'll deploy to Corus, we need to install Tomcat on the host(s) where our distribution will be deployed.
			  That is, on such a host, we'll deploy not only Corus, but Tomcat also.
		    </p>
		    <p>
		    So, on the target host(s), unzip the Tomcat package in a directory of your choosing - this becomes Tomcat's home directory (which corresponds, when we're running Tomcat
		    is a standalone manner, to the <tt>CATALINA_HOME</tt> environment variable that we typically set has part of Tomcat's installation).
		    </p>
		    <p>
		    Assuming that you also have Corus installed at this point (on the same hosts as Tomcat), you must push Tomcat's home directory to Corus, as a process property:
		    </p>
		    <sapia:code>conf add -p tomcat.home=/&lt;path_to_tomcat_home&gt; -cluster</sapia:code>
		    <p>
		    This variable will be used to indicate to the Tomcat instance) where its libraries are to be found - multiple such instances can thus be started on the same host through
		    Corus, all sharing the same base installation. 
		    </p>
	    </sapia:sect3>
	    <sapia:sect3 title="Logging Directory">
	    	<p>
	    	  One of the aspects we have to address is the directory where Tomcat logs should be kept, on a per-instance basis. We've chosen to keep Tomcat logs under <tt>/var/log/tomcat</tt>,
	    	  and an instance-specific directory will be kept underneath that directory, for each instance we might want to run on the same host (the instance-specific directory will
	    	  correspond to the port of the Tomcat instance, as we'll see later). Therefore, create the <tt>/var/log/tomcat</tt> directory, and assign to it the proper ownwership (we're 
	    	  assuming Corus runs under the <tt>corus</tt> user):
	     	</p>
	     	<sapia:code>sudo mkdir /var/log/tomcat
sudo chown corus /var/log/tomcat</sapia:code>
	    </sapia:sect3>
	 	</sapia:sect2>
    
    <sapia:sect2 title="Project Structure">
      <p>
      This section details the structure of the Maven project from which we'll build our Tomcat-enabled distribution. It corresponds to the following file/folder hierarchy
      (we're only listing the configuration resources, not code source files).
      </p>
      
      <sapia:code>pom.xml
/src
  ...
/conf
  catalina.policy
  catalina.properties
  context.xml
  logging.properties
  server.xml
  tomcat-users.xml
  web.xml
/descriptors
  corus.xml
  tomcat-launch.xml
  web.xml
/scripts
  deploy.corus
  ripple.corus</sapia:code>
    	<p>
    	The <a href="https://github.com/sapia-oss/corus/tree/feature/tomcat-sample/samples/corus_sample_tomcat/src/" target="tomcat_sample_github"><tt>src</tt></a> directory holds the Java source code of our webapp. 
    	The code it contains will be built by Maven, and the resulting .jar will be packaged as part of the distribution we're building. To be more precise: the .jar will be placed under 
    	the <tt>WEB-INF/lib</tt> directory of the web app which will be zipped in our distribution, in exploded form.
    	</p>
      
		<p>
		The <a href="https://github.com/sapia-oss/corus/tree/feature/tomcat-sample/samples/corus_sample_tomcat/conf/" target="tomcat_sample_github"><tt>conf</tt></a> directory contains Tomcat configuration files - those 
		that will be used by the Tomcat server which will be started with Corus. We've copied the files from Tomcat's own <tt>conf</tt> directory (found under <tt>$CATALINA_HOME</tt>).
		We will explain later how <tt>context.xml</tt> and <tt>logging.properties</tt> should be modified.
		</p>
		
		<p>
		The <a href="https://github.com/sapia-oss/corus/tree/feature/tomcat-sample/samples/corus_sample_tomcat/descriptors/" target="tomcat_sample_github"><tt>descriptors</tt></a> directory the various config files used to 
		bootstrap the application:
		</p>
		<ul>
			<li><tt>corus.xml</tt>: the actual Corus descriptor, which will be added to the distribution .zip under the <tt>META-INF</tt> directory.</li>
			<li><tt>tomcat-launch.xml</tt>: a Magnet startup script, which is used to set up the Tomcat classpath, for the most part (the classpath of a standards-based
			Java web container must set up so that the libraries it defines are isolated from the classpath of the applications).</li>
			<li><tt>web.xml</tt>: the actual application's web descriptor.</li>
		</ul>
		
		<p>
		And then, there is our Corus script (under the <a href="https://github.com/sapia-oss/corus/tree/feature/tomcat-sample/samples/corus_sample_tomcat/scripts/" target="tomcat_sample_github"><tt>scripts</tt></a> directory). 
		It is used to deploy our distribution to Corus (we could do the steps manually, but a script is much more handy).
		</p>
		
    </sapia:sect2>
    
    <sapia:sect2 title="Distribution Structure">
      <p>
      Our goal is of course to build a distribution holding our application resources (libraries, config files). The distribution follows the 
      structure required to deploy to Corus, and corresponds to the following structure:
      </p>
      <sapia:code>tomcat-launch.xml
/META-INF
  corus.xml
/conf
  catalina.policy
  catalina.properties
  context.xml
  logging.properties
  server.xml
  tomcat-users.xml
  web.xml
/webapps
  /&lt;webapp_directory&gt;
    /WEB-INF
      web.xml
      /lib
      /&lt;webapp_libraries&gt;</sapia:code>      
      
      <p>
      	The above will be zipped into our distribution file, which will be deployed to Corus. The /&lt;webapp_directory&gt; placeholder corresponds to the
      	directory for our web app. At startup, Tomcat will take any sub-directory of the <tt>webapps</tt> directory as holding such a web app.
      </p>
      <p>
      	As part of our web app, we have the standard <tt>WEB-INF</tt> directory, holding our web app descriptor (<tt>web.xml</tt>). Then underneath the <tt>lib</tt>
      	directory, we have the libraries needed by our app (the .jar generated by our project, holding our app's resources and compiled code, will be packaged
      	under the <tt>lib</tt> directory.
      </p>
      <p>
      	For its part, the <tt>tomcat-launch.xml</tt> file is zipped at the root. That script configures the Tomcat classpath, and invokes Tomcat's <tt>main()</tt> 
      	entry point, triggering the startup of the Tomcat server (the script is executed within Tomcat's JVM).
      </p>
    </sapia:sect2>
    
    <sapia:sect2 title="Overview of the Relevant Files">
      <sapia:sect-desc>
      <p>
      This section presents the files relevant to our deployment.
      </p>
      </sapia:sect-desc>
      
      <sapia:sect3 title="corus.xml" alias="corus_xml">
        <p>The Corus descriptor (<tt>corus.xml</tt>) holds the configuration required by Corus:</p>
        
        <sapia:code>&lt;distribution name=&quot;greetings&quot; version=&quot;1.0&quot;
  xmlns=&quot;http://www.sapia-oss.org/xsd/corus/distribution-4.0.xsd&quot;&gt;

  &lt;process name=&quot;server&quot; maxKillRetry=&quot;3&quot; shutdownTimeout=&quot;300000&quot;
    invoke=&quot;true&quot;&gt;

    &lt;!-- Port requirements --&gt;
    &lt;port name=&quot;tomcat.http&quot; /&gt;
    &lt;port name=&quot;tomcat.ajp&quot; /&gt;
    &lt;port name=&quot;tomcat.redirect&quot; /&gt;
    &lt;port name=&quot;tomcat.jmx&quot; /&gt;

    &lt;!-- Server profile --&gt;
    &lt;magnet magnetFile=&quot;tomcat-launch.xml&quot; magnetOptions=&quot;-debug&quot;
      profile=&quot;server&quot; vmType=&quot;server&quot;&gt;

      &lt;libDirs&gt;${tomcat.home}/bin/bootstrap.jar;${tomcat.home}/bin/tomcat-juli.jar&lt;/libDirs&gt;
      &lt;arg value=&quot;-Xss512K&quot; /&gt;
      &lt;arg value=&quot;-XX:PermSize=256M&quot; /&gt;

      &lt;xoption name=&quot;ms&quot; value=&quot;${tomcat.mem.ms}&quot; /&gt;
      &lt;xoption name=&quot;mx&quot; value=&quot;${tomcat.mem.mx}&quot; /&gt;

      &lt;property name=&quot;java.awt.headless&quot; value=&quot;true&quot; /&gt;
      &lt;property name=&quot;catalina.home&quot; value=&quot;${tomcat.home}&quot; /&gt;
      &lt;property name=&quot;file.encoding&quot; value=&quot;UTF-8&quot; /&gt;
      &lt;property name=&quot;tomcat.log.dir&quot; value=&quot;/var/log/tomcat/${corus.process.port.tomcat.http}&quot; /&gt;

      &lt;property name=&quot;com.sun.management.jmxremote&quot; value=&quot;&quot; /&gt;
      &lt;property name=&quot;com.sun.management.jmxremote.local.only&quot; value=&quot;false&quot; /&gt;
      &lt;property name=&quot;com.sun.management.jmxremote.ssl&quot; value=&quot;false&quot; /&gt;
      &lt;property name=&quot;com.sun.management.jmxremote.port&quot; value=&quot;${corus.process.port.tomcat.jmx}&quot; /&gt;
      &lt;property name=&quot;com.sun.management.jmxremote.authenticate&quot; value=&quot;false&quot; /&gt;
    &lt;/magnet&gt;

  &lt;/process&gt;
&lt;/distribution&gt;</sapia:code>
        
        <p>The descriptor is worthy of some explanations.</p>
        
        <sapia:sect4 title="Ports" alias="ports">
          <p>
          We're requiring ports from the ranges with the following names (these ranges should be created in Corus, prior to executing our process, 
          through the <tt>port add</tt> command - we're automating this part in our <tt>deploy.corus</tt> script):
          </p>
          <ul>
            <li><tt>tomcat.http</tt>: corresponds to Tomcat's HTTP port.</li>
            <li><tt>tomcat.ajp</tt>: for Tomcat's AJP port.</li>
            <li><tt>tomcat.redirect</tt>: Tomcat's redirect port.</li>
            <li><tt>tomcat.jmx</tt>: The port of the JMX agent with Tomcat's JVM.</li>
          </ul>
          <p>
            Upon executing a process, Corus checks if <tt>&lt;port&gt;</tt> elements have been defined. If they have, Corus gets the next available port from the relevant port range
            (for each range name specified in the descriptor). The value of each port will be passed to the JVM as a system property, using a <tt>-D</tt> option.
            The property name follows this format:
            
            <sapia:code>corus.proces.port.&lt;port_range_name&gt;</sapia:code>
            
            To speak more concretely, given the port range with name <tt>tomcat.http</tt>, a property will with the following name: <tt>corus.process.port.tomcat.http</tt>. The
            value of the property will be the actual port.
          </p>
          <p>
            As can be seen in our descriptor, we're using such property in variables, as follows:
            
            <sapia:code> &lt;property name=&quot;tomcat.log.dir&quot; value=&quot;/var/log/tomcat/${corus.process.port.tomcat.http}&quot; /&gt;</sapia:code>
            
            The intent above is to create a log directory that will be specific to the Tomcat instance being started - we'll see further below ow the <tt>tomcat.log.dir</tt>
            property is used.
          </p>
        </sapia:sect4>
        <sapia:sect4 title="tomcat.home">
          <p>
          We're also seeing in our descriptor how the <tt>tomcat.home</tt> property is used. First here:
          </p>
          
          <sapia:code>&lt;libDirs&gt;${tomcat.home}/bin/bootstrap.jar;${tomcat.home}/bin/tomcat-juli.jar&lt;/libDirs&gt;</sapia:code>
          
          <p>
          The above configures Tomcat's bootstrap classpath. We're also definining the <tt>catalina.home</tt> property - which is required by Tomcat:
          </p>
          
          <sapia:code>&lt;property name=&quot;catalina.home&quot; value=&quot;${tomcat.home}&quot; /&gt;</sapia:code>
        </sapia:sect4>
        
      </sapia:sect3>
      
      <sapia.sect3 title="tomcat-launch.xml">
        <p>
          The <tt>tomcat-launch</tt> file is the <a href="http://www.sapia-oss.org/projects/magnet/" target="magnet">Magnet</a> descriptor from which
          the Tomcat server will be instantiated and started - it is not:
        </p>
        <sapia:code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;

&lt;magnet xmlns=&quot;http://schemas.sapia-oss.org/magnet/&quot; name=&quot;Tomcat&quot; description=&quot;Tomcat 7 Server&quot;&gt;

    &lt;!-- Parameters --&gt;
    &lt;parameters&gt;
        &lt;!-- Tomcat specific configuration (catalina.home is set in the corus.xml)--&gt;
        &lt;param name=&quot;catalina.base&quot;   value=&quot;${user.dir}&quot;           scope=&quot;system&quot; /&gt;
        &lt;param name=&quot;catalina.tmpdir&quot; value=&quot;${catalina.base}/${corus.process.port.tomcat.http}/temp&quot; scope=&quot;system&quot; /&gt;
        &lt;param name=&quot;java.io.tmpdir&quot;  value=&quot;${catalina.base}/${corus.process.port.tomcat.http}/temp&quot; scope=&quot;system&quot; /&gt;

        &lt;param name=&quot;java.util.logging.config.file&quot; scope=&quot;system&quot;
               value=&quot;${catalina.base}/conf/logging.properties&quot; /&gt;

        &lt;param name=&quot;java.util.logging.manager&quot;     scope=&quot;system&quot;
               value=&quot;org.apache.juli.ClassLoaderLogManager&quot; /&gt;

        &lt;param name=&quot;java.endorsed.dirs&quot;            scope=&quot;system&quot;
               value=&quot;${catalina.home}/endorsed&quot; /&gt;

    &lt;/parameters&gt;

    &lt;!-- Profile-specific configuration --&gt;

    &lt;launcher type=&quot;tomcat&quot; name=&quot;Tomcat launcher&quot; args=&quot;start&quot;&gt;
        &lt;profile name=&quot;server&quot;&gt;
            &lt;classpath /&gt;
        &lt;/profile&gt;
    &lt;/launcher&gt;

&lt;/magnet&gt;</sapia:code>

        <p>
          That descriptor defines the <tt>catalina.base</tt> system property, which is used internally by Tomcat. It is made to correspond to <tt>user.dir</tt>,
          which in fact is set by Corus at process startup, and corresponds to the directory where the distribution has been unzipped. The descriptor also holds
          other Tomcat-specific properties, as can be seen.
        </p>
        <p>
          Lastly, the <tt>&lt;launcher&gt;</tt> element corresponds to the part whic, at runtime, invokes the Tomcat server, triggering its execution.
        </p>
      </sapia.sect3>
      
      <sapia:sect3 title="Logging">
        <p>
          We're configuring logging so that Tomcat logs to files, rather than to stdout/stderr. This controlled in part by the <tt>context.xml</tt> file
          (under the <tt>conf</tt> directory). We're insuring that the &lt;<tt>Context</tt>&gt; element has its <tt>swallowOutput</tt> attribute set to <tt>true</tt>:
        </p>
        <sapia:code>&lt;Context swallowOutput=&quot;true&quot;&gt;</sapia:code>
        <p>
          Then, we're insuring that the <tt>logging.properties</tt> file (also under the <tt>conf</tt> directory) uses the <tt>tomcat.log.dir</tt> property
          that <a href="#corus_xml">we've defined</a> in our <tt>corus.xml</tt> file. For example:
        </p>
        
        <sapia:code>1catalina.org.apache.juli.FileHandler.directory = ${tomcat.log.dir}</sapia:code>
        
        <p>
          We're also removing from that file all mentions of the <tt>ConsoleHandler</tt>, meaning that instead of this line for example:
        </p>
        <sapia:code>.handlers = 1catalina.org.apache.juli.FileHandler, java.util.logging.ConsoleHandler</sapia:code>
        
        <p>
          We should have this line:
        </p>
        <sapia:code>.handlers = 1catalina.org.apache.juli.FileHandler</sapia:code>
      </sapia:sect3>
      
      <sapia:sect3 title="server.xml">
        <p>
        The <a href="http://www.merriam-webster.com/dictionary/pi%C3%A8ce%20de%20r%C3%A9sistance" target="piece_de_resistance"><i>piece de resistance</i></a> 
        consists of making sure Tomcat uses the ports we have defined, and that <a href="#ports">we're passing to it dynamically</a>. This is done in the 
        <tt>server.xml</tt> file. Here's an example:
        </p>
<sapia:code>&lt;Connector port=&quot;${corus.process.port.tomcat.http}&quot; protocol=&quot;HTTP/1.1&quot;
  connectionTimeout=&quot;20000&quot;
  redirectPort=&quot;${corus.process.port.tomcat.redirect}&quot;
  compressableMimeType=&quot;text/xml,application/xml&quot;
  compression=&quot;on&quot;
  noCompressionUserAgents=&quot;gozilla, traviata&quot;/&gt;</sapia:code>     
      
      </sapia:sect3> 
      <sapia:sect3 title="Deployment Script">
        <p>
          Lastly, here is our Corus deploy script:
        </p>
        <sapia:code>echo "--> Killing currently running processes"
kill all -w -cluster
echo "--> Undeploying current version"
undeploy all -cluster
echo "--> Pushing config"
port del -n tomcat.* -f -cluster
port add -f -n tomcat.http -min 8100 -max 8105 -cluster
port add -f -n tomcat.ajp -min 8200 -max 8205 -cluster
port add -f -n tomcat.redirect -min 8300 -max 8305 -cluster
port add -f -n tomcat.jmx -min 8400 -max 8405 -cluster
conf add -p tomcat.mem.ms=512m -cluster
conf add -p tomcat.mem.mx=1024m -cluster
echo "--> Proceeding to deployment" 
deploy target/corus_sample_tomcat*-dist.zip -cluster
echo "Deployment completed"</sapia:code>

        <p>
          The above contains the Corus commands required for our deployment. Basically, we're doing the following:
        </p>
        <ul>
          <li>Killing all currently running processes (we could be more specific an target only the processes corresponding to our Tomcat instance).</li>
          <li>Undeploying all currently deployed distributions (here again we could be more specific and target only our distribution).</li>
          <li>Pushing our port range configuration.</li>
          <li>Pushing our process proeprties.</li>
          <li>Deploying our distribution</li>
        </ul>
        <p>
          Such a deployment script can be executing through the Corus' command-line interface, either by invoking the CLI this way:
        </p>
        <sapia:code>coruscli -s scripts/deploy.corus</sapia:code>
        
        <p>Or by using the <tt>script</tt> command, from within the CLI:</p>
        <sapia:code>script scripts/deploy.corus</sapia:code>
        
      </sapia:sect3>
     
    </sapia:sect2>
    <sapia:sect2 title="Conclusion">
      <p>
        This recipe aimed at illustrating how to deploy a Tomcat-enabled web app to Corus, and how to run multiple Tomcat instances on the same us - using Corus' port management feature.
        Here are the steps, as a summary:
      </p>
      <ol>
        <li>Install Corus and Tomcat on each machine where the web app is to be run.</li>
        <li>Add the <tt>tomcat.home</tt> property to Corus (the property value should correspond to Tomcat's home directory): <tt>conf add -p tomcat.home=&lt;path_to_tomcat_home&gt; -cluster</tt></li>
        <li>Define the directory where the log files should be created.</li>
        <li>Build the distribution.</li>
        <li>Deploy to Corus.</li>
      </ol>
    </sapia:sect2>  
  </sapia:sect1>
</sapia:page>

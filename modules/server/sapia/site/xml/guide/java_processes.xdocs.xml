<sapia:page cssPath="../css/sapia.css" title="The Corus Guide - Java Processes" xmlns:sapia="http://www.sapia-oss.org/2003/XSL/Transform">

  <head>
    <link rel="stylesheet" href="css/corus.css" type="text/css"/>
  </head>

  <sapia:vmenu>
    <sapia:vsection name="Corus Home" href="../home.html"/>
  	<sapia:vsection name="REST API" href="../rest.html"/>
    <sapia:vsection name="Interop Spec" href="../CorusInterop.pdf"/>
    <sapia:vsection name="Corus vs Chef" href="../corus_vs_chef.html"/>

  </sapia:vmenu>

  <sapia:sect1 title="Java Processes">
    <sapia:section>
      <sapia:path name="home" href="../../../home.html" />
      <sapia:path name="projects" />
      <sapia:path name="corus" href="../home.html" />
      <sapia:path name="learning" href="../learning.html" />
      <sapia:path name="guide" href="home.html" />
      <sapia:path name="java processes"/>
    </sapia:section>

    <toc/>

		<sapia:sect-desc>
			<p>
				As was mentioned earlier, Corus allows starting any type of process (provided it interacts with Corus according to the <a href="http://www.sapiaoss.org/projects/corus/CorusInterop.pdf">Corus Interoperability Specification</a>). As far as Java processes are concerned, there are a few things to know..
			</p>
		</sapia:sect-desc>
		<sapia:sect2 title="Corus Interoperability Specification in Java" alias="java-interop">
			<p>
				The Corus interop spec implementation in Java is another Sapia project. The implementation consists of a small .jar file named <tt>sapia_corus_iop.jar</tt>. That library consists of a small XML/HTTP client (as required by the spec).
			</p>
			<p>
				When executing Java VMs from Corus, that library is â€œplaced" in the application's classpath automatically. The library is made "invisible" to your applications since it is not placed at the level of the system classloader, but at the level of a classloader that is a child of the system classloader, and which is really a sibling of your application's own classloader.
			</p>
			<p>
				The Java interop implementation detects that it has been started by a Corus server by looking up the system properties; if it finds a value for the <tt>corus.process.id</tt> property, then it determines that it should poll the corresponding Corus server. In order to do so, it needs the host/port on which the Corus server is listening, which it acquires through the <tt>corus.server.host</tt> and <tt>corus.server.port</tt> system properties. Using the values specified through these properties, the Corus interop instance connects to the Corus server and starts the polling process.
			</p>
		</sapia:sect2>
		<sapia:sect2 title="Troubleshooting">
			<p>In order to facilitate troubleshooting, the Java interop client creates the following files under the process directory:</p>
			<ul>
				<li>stdout.txt</li>
				<li>stderr.txt</li>
			</ul>
			<p>
				These files hold the output resulting from the redirection of the <tt>java.lang.System.out</tt> and <tt>java.lang.System.err</tt> output streams. In addition, when a Corus server starts a process, it logs that process' initial output to the given process' directory, in a file named <tt>process.out</tt>
			</p>
			<p>
				In the case of Java processes, this allows tracking errors that have occurred before the JVM was started.
			</p>
		</sapia:sect2>
		<sapia:sect2 title="Interacting with Corus from Java">
			<sapia:sect-desc>
				<p>
					Java applications can interact with Corus to
				</p>
				<ul>
					<li>Request a process restart or shutdown.</li>
					<li>Be notified upon shutdown.</li>
					<li>Transmit status information.</li>
					<li>Receive process configuration updates from the Corus server (a functionality dubbed "hot config").</li>
				</ul>
			</sapia:sect-desc>
			<sapia:sect3 title="Dependency">
				<p>
					In all cases, to interact with Corus from your applications, you will need the <tt>sapia_corus_iop_api.jar</tt> library in your classpath. This library can be configured as a dependency, as part of your Maven build, as such:
				</p>
				<sapia:code><![CDATA[<dependency>
  <groupId>org.sapia</groupId>
  <artifactId>sapia_corus_iop_api</artifactId>
  <version>3.0</version>
</dependency>]]></sapia:code>
				<p>The API provided by the library allows you to hook your application to the lifecycle of the JVM, as it's managed by Corus.</p>
			</sapia:sect3>
			<sapia:sect3 title="Triggering a Restart">
				<p>An application can request a JVM restart with code such as the following:</p>
				<sapia:code>import org.sapia.corus.interop.api.InteropLink;
InteropLink.getImpl().restart();</sapia:code>
			</sapia:sect3>
			<sapia:sect3 title="Triggering a Shutdown">
				<p>An application can request a JVM shutdown as follows:</p>
				<sapia:code>import org.sapia.corus.interop.api.InteropLink;
InteropLink.getImpl().shutdown();</sapia:code>
			</sapia:sect3>
			
			<sapia:sect3 title="Registering a Shutdown Listener">
				<p>	
					You can register a <sapia:class>org.sapia.corus.interop.api.ShutdownListener</sapia:class> in order to be notified of a JVM shutdown originating from Corus:
				</p>
				<sapia:code>import org.sapia.corus.interop.api.InteropLink; 
import org.sapia.corus.interop.api.ShutdownListener; 

public class MyListener implements ShutdownListener {  
  public void onShutdown() {    
    ...  
  } 
} 
	
ShutdownListener listener = new MyListener(); 
InteropLink.getImpl().addShutdownListener(listener);</sapia:code>

				<p>
					Note that <sapia:class>ShutdownListener</sapia:class>s are internally kept as <sapia:class>java.lang.ref.SoftReference</sapia:class> instances, so it is important that you keep a hard reference on any such listener in your application.
				</p>
			</sapia:sect3>
			<sapia:sect3 title="Producing Status Data">
				<p>It is possible for applications to publish status information through Corus. That information will be viewable through the CLI (using the <tt>status</tt> command, and will also be accessible through the REST API</p>
				
				<p>
					In order to publish status information, you must register a <sapia:class>StatusRequestListener</sapia:class>:
				</p>
				<sapia:code>import org.sapia.corus.interop.api.InteropLink;
import org.sapia.corus.interop.api.StatusRequestListener;
import org.sapia.corus.interop.api.message.InteropMessageBuilderFactory;
import org.sapia.corus.interop.api.message.StatusMessageCommand.Builder;

public class MyListener implements StatusRequestListener { 
  public void onStatus(Builder statusBuilder, InteropMessageBuilderFactory factory) {
    ...
  } 
} 

StatusRequestListener listener = new MyListener(); 
InteropLink.getImpl().addStatusRequestListener(listener);</sapia:code>
		
				<p>Since listeners are kept as <sapia:class>SoftRerence</sapia:class>s, you must keep a hard reference on them in your code.</p>
				<p>The listener will be invoked periodically (at the interval at which the process will poll the Corus server). It will be passed a <sapia:class>Status</sapia:class> instance, to which the listener can then add status information, as follows:</p>
<sapia:code>import org.sapia.corus.interop.api.InteropLink;
import org.sapia.corus.interop.api.StatusRequestListener;
import org.sapia.corus.interop.api.message.ContextMessagePart;
import org.sapia.corus.interop.api.message.InteropMessageBuilderFactory;
import org.sapia.corus.interop.api.message.StatusMessageCommand.Builder;

...

  public void onStatus(Builder statusBuilder, InteropMessageBuilderFactory factory) {
    ContextMessagePart.Builder contextBuilder = factory.newContextBuilder().name("org.sapia.corus.sample.jetty");
    contextBuilder
      .param("dispatched", String.valueOf(stats.getDispatched()))
      .param("dispatchedActive", String.valueOf(stats.getDispatchedActive()))
      .param("dispatchedActiveMax", String.valueOf(stats.getDispatchedActiveMax()))
      .param("dispatchedTimeMax", String.valueOf(stats.getDispatchedTimeMax()))
      .param("dispatchedTimeTotal", String.valueOf(stats.getDispatchedTimeTotal()))
      .param("dispatchedTimeMean", String.valueOf(stats.getDispatchedTimeMean()))
      .param("requests", String.valueOf(stats.getRequests()))
      .param("requestsActive", String.valueOf(stats.getRequestsActive()))
      .param("requestsActiveMax", String.valueOf(stats.getRequestsActiveMax()))
      .param("requestsTimeMax", String.valueOf(stats.getRequestTimeMax()))
      .param("requestsTimeMean", String.valueOf(stats.getRequestTimeMean()))
      .param("requestsTimeTotal", String.valueOf(stats.getRequestTimeTotal()))
      .param("suspends", String.valueOf(stats.getSuspends()))
      .param("suspendsActive", String.valueOf(stats.getSuspendsActive()))
      .param("suspendsActiveMax", String.valueOf(stats.getSuspendsActiveMax()));
    statusBuilder.context(contextBuilder.build());        
  }
  
...</sapia:code>
				<p>
					In the above code, the listener creates a <sapia:class>ContextMessagePart</sapia:class> instance, adding status parameters to it. Lastly, the <sapia:class>ContextMessagePart</sapia:class> is added to the status builder that is passed to the method. 
				</p>
			</sapia:sect3>
			<sapia:sect3 title="Hot Config">
				<p>
					It is possible for applications to be notified of configuration changes that occur on the Corus server side, more precisely: when process properties are updated/added/removed, either through the CLI's conf add command, or through the REST API.
				</p>
				<p>
					For Java applications, the interop client allows registering a <sapia:class>ConfigurationChangeListener</sapia:class> for intercepting so-called "configuration events". The interface's signature is as follows:
				</p>
				<sapia:code>public interface ConfigurationChangeListener {
  
  public void onConfigurationChange(ConfigurationEventMessageCommand event);

}</sapia:code>
				<p>
					A <sapia:class>ConfigurationEventMessageCommand</sapia:class> encapsulates <sapia:class>ParamMessagePart</sapia:class> objects, each in fact corresponding to a process property that's been either added or removed. The event also has a <sapia:command>getType()</sapia:command> method, indicating  the type of operation (add, update, delete) that caused the event. The return value of the method can be one of the following:
				</p>
				<ul>
					<li><tt><b>update</b></tt>: indicates that the property has been added to Corus, or updated.</li>
					<li><tt><b>delete</b></tt>: indicates that the property has been removed from Corus.</li>
				</ul>
				<p>
					To register your listener, proceed as follows:
				</p>
				<sapia:code><![CDATA[ConfigurationChangeListener configListener = new ConfigurationChangeListener() {
  public void onConfigurationChange(ConfigurationEventMessageCommand event) {
    log.debug("Received config change: {}", event.getType());
    
    // get the modified properties as a Map
    Map<String, String> properties = event.toMap()
    
    // or you can also get them as Param objects:
    for(ParamMessagePart p : event.getParams()) {
      if (event.getType().equals(ConfigurationEventMessageCommand.TYPE_UPDATE)) {
        log.debug("Property {} was added/modified", p.getName());
      } else {
        log.debug("Property {} was deleted", p.getName());
      }
    }
  }
}; 
InteropLink.getImpl().add(configListener);]]></sapia:code>
				<sapia:note>
					As mentioned earlier and for the sake of insisting: listeners are kept as <sapia:class>SoftRerence</sapia:class>s, so you must keep a hard reference on them in your code.
				</sapia:note>
			</sapia:sect3>
		</sapia:sect2>
  </sapia:sect1>
</sapia:page>

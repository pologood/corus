<sapia:page cssPath="../css/sapia.css" title="The Corus Guide - Port Management" xmlns:sapia="http://www.sapia-oss.org/2003/XSL/Transform">

  <head>
    <link rel="stylesheet" href="css/corus.css" type="text/css"/>
  </head>

  <sapia:vmenu>
    <sapia:vsection name="Corus Home" href="../home.html"/>
  	<sapia:vsection name="REST API" href="../rest.html"/>
    <sapia:vsection name="Interop Spec" href="../CorusInterop.pdf"/>
    <sapia:vsection name="Corus vs Chef" href="../corus_vs_chef.html"/>

  </sapia:vmenu>

  <sapia:sect1 title="Port Management">
    <sapia:section>
      <sapia:path name="home" href="../../../home.html" />
      <sapia:path name="projects" />
      <sapia:path name="corus" href="../home.html" />
      <sapia:path name="learning" href="../learning.html" />
      <sapia:path name="guide" href="home.html" />
      <sapia:path name="port management"/>
    </sapia:section>

    <toc/>

    <sapia:sect-desc>
    	<p>
    		Corus has a port management feature allowing the specification of so-called “port ranges". Network ports belonging to these ranges are leased to started processes and “recuperated" upon process termination – in order to be leased to other processes.
    	</p>
    	<p>
    		This feature was implemented as an answer to the classical problem of port assignment in the context of distributed applications, especially when multiple instances of such applications are meant to be deployed on the same host.
    	</p>
    	<p>
    		Since ports on a given host cannot be shared, applications using static ports must have them explicitly configured, which quickly becomes burdensome when dealing with multiple running instances of applications performing the same service.
    	</p>
    	<p>
    		Hence the Corus port management feature, which works as follows:
    	</p>
    	<ul>
    		<li>
    			The administrator creates port ranges (with a minimum and a maximum port) that are given a unique name.
    		</li>
    		<li>
    			As part of the <tt>corus.xml</tt> descriptor, if a process requires a port, then a corresponding <a href="distributions_in_depth.html#port_element"><tt>&lt;port&gt;</tt></a> XML element should appear for that process' configuration. The element takes a <tt>name</tt> attribute whose value must correspond to the name of a configured port range.
    		</li>
    		<li>
    			Upon process start-up, the Corus server remove an available port from the range that matches the port specified as part of the process configuration (Corus keeps a an internal list of leased and available ports for every configured port range).
    		</li>
    		<li>
    			The acquired port is "passed" to the process as a system property (through the commandline that starts the process). The system property format is given below: <tt>-Dcorus.process.port.&lt;range_name&gt;=&lt;port&gt;</tt>
    		</li>
    		<li>
    			That property can then be recuperated by the started process from application code.
    		</li>
    	</ul>
    	<p>
    		The port manager built within Corus can be administered through the Corus command-line interface (type <tt>man port</tt> at the command-line for more information). The configuration snippet below shows how a port is configured; of course multiple port elements can be configured for each &lt;process&gt; element.
    	</p>
    	
    	<sapia:code><![CDATA[<distribution xmlns="http://www.sapia-oss.org/xsd/corus/distribution-5.0.xsd" name="demo" version="1.0">
  <process name="httpServer" maxKillRetry="3" shutdownTimeout="30000" invoke="true">
    <port name="http" />
    <magnet magnetFile="httpServer.magnet.xml" profile="test" vmType="server">
      <property name="http.port" value="${corus.server.port.http}" />
      <xoption name="ms" value="16M" />
    </magnet>
  </process>
</distribution>
    	]]></sapia:code>
    	
    	<p>
    		In the above example, a port named <tt>http</tt> is referred to in the configuration, by the &lt;port&gt; element. This indicates to Corus that upon starting the <tt>httpServer</tt> process, it should pass a port from the <tt>http</tt> range to it.
    	</p>
    	<p>
    		The following command illustrates how such a range would have been created beforehand:
    	</p>
    	<sapia:code>port add -n http -min 8080 -max 8085</sapia:code>
    	<p>
    		So the above command creates the port range named "http". As processes are started that require a port from that range, the number of available ports in the range decreases (until all ports are taken and none can be allocated anymore). The above-configured range would allow
    		for 6 processes to be started in this manner.
    	</p>
    	<p>
    		Note in the Corus descriptor above that a <tt>${corus.server.port.http}</tt> is used: as was mentioned further above, when Corus allocates a port to a process, it makes the value of that port available as a property - which can then be used as a variable in configured, and which is also passed to the JVM being started as a system property, through a <tt>-D</tt> option.
    	</p>
    </sapia:sect-desc>
  </sapia:sect1>
</sapia:page>
